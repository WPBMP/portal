<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <title>#get(title)</title>

  <!-- <link rel="stylesheet" href="/styles/app.css"> -->
  <link rel="stylesheet" href="/styles/ticker.css">
  <!-- <link rel="stylesheet" href="/styles/skeleton.css">
  <link rel="stylesheet" href="/styles/skeletonx.css"> -->
  <link rel="stylesheet" href="/styles/bootstrap.min.css">
  <style media="screen">
  .carousel .carousel-item {
    transition-duration: 2s;
  }
  </style>

</head>
<body>
  #get(body)

  <script src="/js/jquery-3.3.1.slim.min.js"></script>
  <!-- <script src="/js/popper.min.js"></script> -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
  <script src="/js/bootstrap.min.js"></script>
  <script src="/js/Chart.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.6.0"></script>

  <script>
  Chart.helpers.merge(Chart.defaults.global.plugins.datalabels, {
    align: 'top',
    anchor: 'end',
    offset: '4'
  });
  var ctx = document.getElementById("myChart");
  var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ["BMP", "TTSJV", "Total"],
      datasets: [{
        label: 'Man Hours without LTI',
        data: [392010, 2242819, 2634829],
        backgroundColor: [
          'rgba(255, 99, 132, 0.5)',
          'rgba(54, 162, 235, 0.5)',
          'rgba(255, 206, 86, 0.5)'
        ],
        borderColor: [
          'rgba(255,99,132,1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)'
        ],
        borderWidth: 3
      }]
    },
    options: {
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero:true
          }
        }]
      }
    }
  });
  </script>
  <!-- <script>
  var ctx = document.getElementById("myChart");
  var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        backgroundColor: [
          'rgba(255, 99, 132, 0.2)',
          'rgba(54, 162, 235, 0.2)',
          'rgba(255, 206, 86, 0.2)',
          'rgba(75, 192, 192, 0.2)',
          'rgba(153, 102, 255, 0.2)',
          'rgba(255, 159, 64, 0.2)'
        ],
        borderColor: [
          'rgba(255,99,132,1)',
          'rgba(54, 162, 235, 1)',
          'rgba(255, 206, 86, 1)',
          'rgba(75, 192, 192, 1)',
          'rgba(153, 102, 255, 1)',
          'rgba(255, 159, 64, 1)'
        ],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        yAxes: [{
          ticks: {
            beginAtZero:true
          }
        }]
      }
    }
  });
  </script> -->
  <script>
  new Chart(document.getElementById("chartjs-0"),{
    "type":"line",
    "data":{
      "labels":["January","February","March","April","May","June"],
      "datasets":[
        {
          "label": "Lost Time",
          "data": [0,10,30,45,55,80],
          "fill": false,
          "borderColor":"rgb(253, 101, 133)",
          // "borderColor": window.chartColors.red,
          "lineTension":0.1
        },{
          "label": "Non Lost Time",
          "data": [0,85,60,50,35,15,0],
          "fill": false,
          "borderColor":"rgb(61, 163, 232)",
          // "borderColor": window.chartColors.red,
          "lineTension":0.1
        },{
          "label": "First Aid",
          "data": [0,20,20,25,20,20],
          "fill": false,
          "borderColor":"rgb(254, 204, 96)",
          // "borderColor": window.chartColors.red,
          "lineTension":0.1
        }]
    },
    "options":{}
  });
  </script>
  <script>
  new Chart(document.getElementById("chartjs-1"),{
    "type":"line",
    "data":{
      "labels":["January","February","March","April","May","June","July"],
      "datasets":[{
        "label":"My First Dataset",
        "data":[65,59,80,81,56,55,40],
        "fill":false,
        "borderColor":"rgb(75, 192, 192)",
        "lineTension":0.1
      }]
    },
    "options":{}
  });
  </script>
  <script>
  new Chart(document.getElementById("chartjs-2"),{
    "type":"line",
    "data":{
      "labels":["January","February","March","April","May","June","July"],
      "datasets":[{
        "label":"My First Dataset",
        "data":[65,59,80,81,56,55,40],
        "fill":false,
        "borderColor":"rgb(75, 192, 192)",
        "lineTension":0.1
      }]
    },
    "options":{}
  });
  </script>

  <script>
  // Set the date we're counting down to
  var countDownDateESS = new Date("Apr 26, 2020 00:00:00").getTime();

  // Update the count down every 1 second
  var x = setInterval(function() {

    // Get todays date and time
    var now = new Date().getTime();

    // Find the distance between now and the count down date
    var distance = countDownDateESS - now;

    // Time calculations for days, hours, minutes and seconds
    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

    // Output the result in an element with id="ESSTimer"
    document.getElementById("ESSTimer").innerHTML = days + "d " + hours + "h "
    + minutes + "m " + seconds + "s ";

    // If the count down is over, write some text
    if (distance < 0) {
      clearInterval(x);
      document.getElementById("ESSTimer").innerHTML = "EXPIRED";
    }
  }, 1000);
  </script>
  <!-- <script>
  // Set the date we're counting down to
  var countDownDateSitra = new Date("Jun 26, 2020 00:00:00").getTime();

  // Update the count down every 1 second
  var x = setInterval(function() {

    // Get todays date and time
    var now = new Date().getTime();

    // Find the distance between now and the count down date
    var distance = countDownDateSitra - now;

    // Time calculations for days, hours, minutes and seconds
    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

    // Output the result in an element with id="PACTimer"
    document.getElementById("SitraTimer").innerHTML = days + "d " + hours + "h "
    + minutes + "m " + seconds + "s ";

    // If the count down is over, write some text
    if (distance < 0) {
      clearInterval(x);
      document.getElementById("SitraTimer").innerHTML = "EXPIRED";
    }
  }, 1000);
  </script> -->
  <script>
  // Set the date we're counting down to
  var countDownDatePAC = new Date("Apr 26, 2022 00:00:00").getTime();

  // Update the count down every 1 second
  var x = setInterval(function() {

    // Get todays date and time
    var now = new Date().getTime();

    // Find the distance between now and the count down date
    var distance = countDownDatePAC - now;

    // Time calculations for days, hours, minutes and seconds
    var days = Math.floor(distance / (1000 * 60 * 60 * 24));
    var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    var seconds = Math.floor((distance % (1000 * 60)) / 1000);

    // Output the result in an element with id="PACTimer"
    document.getElementById("PACTimer").innerHTML = days + "d " + hours + "h "
    + minutes + "m " + seconds + "s ";

    // If the count down is over, write some text
    if (distance < 0) {
      clearInterval(x);
      document.getElementById("PACTimer").innerHTML = "EXPIRED";
    }
  }, 1000);
  </script>
</body>
</html>
